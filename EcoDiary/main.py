from flask import Flask, render_template, request, redirect, url_for, session, jsonify
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime
import random

# ------------------ –¶–∏—Ç–∞—Ç—ã ------------------
ecological_quotes = [
    "¬´–ú—ã –Ω–µ —É–Ω–∞—Å–ª–µ–¥–æ–≤–∞–ª–∏ –ó–µ–º–ª—é —É –Ω–∞—à–∏—Ö –ø—Ä–µ–¥–∫–æ–≤, –º—ã –≤–∑—è–ª–∏ –µ—ë –≤–∑–∞–π–º—ã —É –Ω–∞—à–∏—Ö –¥–µ—Ç–µ–π.¬ª",
    "¬´–ü–µ—Ä–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ —ç–∫–æ–ª–æ–≥–∏–∏ ‚Äî –≤—Å–µ –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∞–Ω–æ —Å–æ –≤—Å–µ–º.¬ª",
    "¬´–ú—ã—Å–ª–∏ –æ –ø—Ä–∏—Ä–æ–¥–µ ‚Äî —ç—Ç–æ –º—ã—Å–ª–∏ –æ –±—É–¥—É—â–µ–º.¬ª",
    "¬´–ü–æ–∫–∞ –Ω–µ —É–≤–∏–¥–∏—à—å, –∫–∞–∫ –∑–∞–≥—Ä—è–∑–Ω—è—é—Ç —Ä–µ–∫—É, –Ω–µ –ø–æ–π–º—ë—à—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω–∞ —Ü–µ–Ω–Ω–∞.¬ª",
    "¬´–ó–µ–º–ª—è ‚Äî —ç—Ç–æ –Ω–∞—à –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–æ–º. –î–∞–≤–∞–π—Ç–µ –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –Ω–µ–π.¬ª",
    "¬´–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ, —á—Ç–æ –Ω–∞–º –æ—Å—Ç–∞–Ω–µ—Ç—Å—è, –µ—Å–ª–∏ –º—ã –±—É–¥–µ–º –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –∫ –ø—Ä–∏—Ä–æ–¥–µ —Ç–∞–∫, –∫–∞–∫ —Å–µ–π—á–∞—Å, ‚Äî —ç—Ç–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–µ–π.¬ª",
    "¬´–ü—Ä–∏—Ä–æ–¥–∞ –Ω–µ —Ç–µ—Ä–ø–∏—Ç –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–µ–π –∏ –Ω–µ –ø—Ä–æ—â–∞–µ—Ç –æ—à–∏–±–æ–∫.¬ª",
    "¬´–ö–æ–≥–¥–∞ —Å—Ä—É–±–ª–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ—Ä–µ–≤–æ, –∫–æ–≥–¥–∞ –æ—Ç—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ä–µ–∫–∞, –∫–æ–≥–¥–∞ –ø–æ–π–º–∞–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ä—ã–±–∞, ‚Äî —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞ –º—ã –ø–æ–π–º—ë–º, —á—Ç–æ –¥–µ–Ω—å–≥–∏ –Ω–µ–ª—å–∑—è –µ—Å—Ç—å.¬ª",
    "¬´–ú—ã –Ω–µ –º–æ–∂–µ–º —Å–ø–∞—Å—Ç–∏ –º–∏—Ä, –Ω–µ –∏–∑–º–µ–Ω–∏–≤ —Å–µ–±—è.¬ª",
    "¬´–ó–∞–±–æ—Ç–∞ –æ –ø—Ä–∏—Ä–æ–¥–µ ‚Äî —ç—Ç–æ –Ω–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å, —ç—Ç–æ –Ω–∞—à–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å.¬ª",
    "¬´–ü—Ä–∏—Ä–æ–¥–∞ ‚Äî –ª—É—á—à–∏–π —É—á–∏—Ç–µ–ª—å, –ø–æ–∫–∞ –º—ã –≥–æ—Ç–æ–≤—ã –µ—ë —Å–ª—É—à–∞—Ç—å.¬ª",
    "¬´–ú—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ—Ç –º–∏—Ä –≤ –ø–æ–¥–∞—Ä–æ–∫, –¥–∞–≤–∞–π—Ç–µ –æ—Å—Ç–∞–≤–∏–º –µ–≥–æ –Ω–∞—à–∏–º –ø–æ—Ç–æ–º–∫–∞–º –Ω–µ –º–µ–Ω–µ–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–º.¬ª",
    "¬´–≠–∫–æ–ª–æ–≥–∏—è ‚Äî —ç—Ç–æ –Ω–µ –º–æ–¥–∞, —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å.¬ª",
    "¬´–ü–ª–∞–Ω–µ—Ç–∞ ‚Äî —ç—Ç–æ –Ω–∞—à –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–æ–º, –∏ –º—ã –¥–æ–ª–∂–Ω—ã –±–µ—Ä–µ—á—å –µ–≥–æ.¬ª",
    "¬´–ü—Ä–∏—Ä–æ–¥–∞ ‚Äî —ç—Ç–æ —Ç–æ, —á—Ç–æ –º—ã –ø–æ—Ç–µ—Ä—è–µ–º, –µ—Å–ª–∏ –±—É–¥–µ–º –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –∫ –Ω–µ–π, –∫–∞–∫ –∫ —á–µ–º—É-—Ç–æ —Å–∞–º–æ —Å–æ–±–æ–π —Ä–∞–∑—É–º–µ—é—â–µ–º—É—Å—è.¬ª",
    "¬´–î—É–º–∞–π –≥–ª–æ–±–∞–ª—å–Ω–æ, –¥–µ–π—Å—Ç–≤—É–π –ª–æ–∫–∞–ª—å–Ω–æ.¬ª",
    "¬´–°–æ—Ö—Ä–∞–Ω–∏–º –ø—Ä–∏—Ä–æ–¥—É –≤–º–µ—Å—Ç–µ.¬ª",
    "¬´–ß–∏—Å—Ç–æ—Ç–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ç–µ–±—è.¬ª",
    "¬´–ë—É–¥—É—â–µ–µ –≤ –Ω–∞—à–∏—Ö —Ä—É–∫–∞—Ö.¬ª",
    "¬´–ó–µ–º–ª—è –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –Ω–∞–º, —ç—Ç–æ –º—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏–º –µ–π.¬ª",
    "¬´–ò–∑–º–µ–Ω–∏ –º–∏—Ä ‚Äî –Ω–∞—á–Ω–∏ —Å —Å–µ–±—è.¬ª"
]


# ------------------ Flask ------------------
app = Flask(__name__)
app.secret_key = "supersecret"

# ------------------ –ë–î ------------------
app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///users.db"
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
db = SQLAlchemy(app)

# ------------------ –ú–æ–¥–µ–ª–∏ ------------------
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(120), unique=True, nullable=False)   
    username = db.Column(db.String(100), nullable=True)              
    password = db.Column(db.String(200), nullable=False)      
    def __repr__(self):
        return f"<User {self.email}>"


class Card(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey("user.id"), nullable=False)

    title = db.Column(db.String(100), nullable=False)
    subtitle = db.Column(db.String(300), nullable=False)
    text = db.Column(db.Text, nullable=False)

    poll_score = db.Column(db.Integer, default=0)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)


class Feedback(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(120), nullable=False)
    message = db.Column(db.Text, nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)


with app.app_context():
    db.create_all()


# ------------------ –•–µ–ª–ø–µ—Ä—ã ------------------
def current_user():
    if "user_id" not in session:
        return None
    return User.query.get(session["user_id"])


# ------------------ –†–æ—É—Ç—ã ------------------
@app.route("/")
def first():
    if "user_id" in session:
        return redirect(url_for("index"))
    return render_template("welcome.html")


@app.route("/index")
def index():
    if "user_id" not in session:
        return redirect(url_for("login"))
    random_quote = random.choice(ecological_quotes)
    user = current_user()
    return render_template("index.html", username=user.username or user.email, quote=random_quote)


# ---------- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ----------
@app.route("/register", methods=["GET", "POST"])
def register():
    if request.method == "POST":
        email = request.form["email"].strip()
        username = request.form.get("username", "").strip()
        password = request.form["password"].strip()

        if not email or not password:
            return "–í–≤–µ–¥–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å."

        if User.query.filter_by(email=email).first():
            return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"

        user = User(email=email, username=username, password=password)
        db.session.add(user)
        db.session.commit()

        session["user_id"] = user.id
        return redirect(url_for("index"))

    return render_template("register.html")


# ---------- –í—Ö–æ–¥ ----------
@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        email = request.form["email"].strip()
        password = request.form["password"].strip()

        user = User.query.filter_by(email=email, password=password).first()
        if user:
            session["user_id"] = user.id
            return redirect(url_for("index"))
        return "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å!"

    return render_template("login.html")


@app.route("/logout")
def logout():
    session.pop("user_id", None)
    return redirect(url_for("first"))


# ---------- –ö–∞—Ä—Ç–æ—á–∫–∏ ----------
@app.route("/cards")
def cards():
    if "user_id" not in session:
        return redirect(url_for("login"))
    user = current_user()
    all_cards = Card.query.filter_by(user_id=user.id).order_by(Card.id.desc()).all()
    return render_template("cards.html", cards=all_cards)


@app.route("/create_card", methods=["GET", "POST"])
def create_card():
    if "user_id" not in session:
        return redirect(url_for("login"))
    user = current_user()

    if request.method == "POST":
        title = request.form["title"]
        subtitle = request.form["subtitle"]
        text = request.form["text"]

        poll_score = sum(int(v) for v in request.form.getlist("poll_options"))

        card = Card(
            user_id=user.id,
            title=title,
            subtitle=subtitle,
            text=text,
            poll_score=poll_score
        )
        db.session.add(card)
        db.session.commit()
        return redirect(url_for("cards"))

    return render_template("create_card.html")


@app.route("/card/<int:id>")
def view_card(id):
    if "user_id" not in session:
        return redirect(url_for("login"))
    user = current_user()
    card = Card.query.filter_by(id=id, user_id=user.id).first_or_404()

    poll_score = card.poll_score
    thanks = get_thanks_message(poll_score)

    return render_template("card.html", card=card, thanks=thanks)


# ---------- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ----------
def get_thanks_message(score):
    if score == 0:
        return "–°–µ–≥–æ–¥–Ω—è —Ç—ã –Ω–∏—á–µ–≥–æ –Ω–µ —Å–¥–µ–ª–∞–ª(-–∞) –¥–ª—è –ø—Ä–∏—Ä–æ–¥—ã. üòî"
    elif 0 < score <= 20:
        return "–¢—ã –¥–µ–ª–∞–µ—à—å –ø–µ—Ä–≤—ã–µ —à–∞–≥–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üå±"
    elif 20 < score <= 70:
        return "–¢—ã –¥–µ–ª–∞–µ—à—å —É—Å–ø–µ—Ö–∏! –ö–∞–∂–¥—ã–π —Ç–≤–æ–π —à–∞–≥ –≤–∞–∂–µ–Ω. üëè"
    elif 70 < score <= 120:
        return "–í–ø–µ—á–∞—Ç–ª—è–µ—Ç! –¢–≤–æ—è –∑–∞–±–æ—Ç–∞ –æ –ø–ª–∞–Ω–µ—Ç–µ –æ—á–µ–≤–∏–¥–Ω–∞. ‚ú®"
    elif 120 < score <= 170:
        return "–¢—ã ‚Äî –Ω–∞—Å—Ç–æ—è—â–∏–π(-–∞—è) —ç–∫–æ-–≥–µ—Ä–æ–π(-–∏–Ω—è)! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! ü¶∏‚Äç‚ôÄÔ∏è"
    else:
        return "–¢—ã ‚Äî –∞–±—Å–æ–ª—é—Ç–Ω—ã–π(-–∞—è) –∑–∞—â–∏—Ç–Ω–∏–∫(-—Ü–∞) –ø—Ä–∏—Ä–æ–¥—ã! –¢–≤–æ–π –≤–∫–ª–∞–¥ –Ω–µ–æ—Ü–µ–Ω–∏–º! üåç"


@app.route("/get_scores")
def get_scores():
    if "user_id" not in session:
        return redirect(url_for("login"))
    user = current_user()
    cards = Card.query.filter_by(user_id=user.id).order_by(Card.created_at.asc()).all()
    data = {
        "labels": [c.created_at.strftime("%d-%m") for c in cards],
        "scores": [c.poll_score for c in cards],
        "thanks": [get_thanks_message(c.poll_score) for c in cards]
    }
    return jsonify(data)


@app.route("/stats")
def stats():
    if "user_id" not in session:
        return redirect(url_for("login"))
    user = current_user()
    return render_template("stats.html", username=user.username or user.email)


@app.route("/tips")
def tips():
    if "user_id" not in session:
        return redirect(url_for("login"))
    return render_template("tips.html")


# ---------- –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å ----------
@app.route("/feedback", methods=["GET", "POST"])
def feedback():
    if "user_id" not in session:
        return redirect(url_for("login"))

    if request.method == "POST":
        name = request.form["name"]
        email = request.form["email"]
        message = request.form["message"]

        fb = Feedback(name=name, email=email, message=message)
        db.session.add(fb)
        db.session.commit()

        return render_template("feedback_success.html", name=name)

    return render_template("feedback.html")


# ------------------ –ó–∞–ø—É—Å–∫ ------------------
if __name__ == "__main__":
    app.run(debug=True)
